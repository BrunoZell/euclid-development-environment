---
- name: Get current timestamp
  set_fact:
    current_time: "{{ lookup('pipe', 'date +%Y-%m-%dT%H:%M:%S%z') }}"
  when: force_genesis | bool

- name: Ensure older-datas directory exists
  ansible.builtin.file:
    path: /home/{{ ansible_user }}/code/metagraph-l0/older-datas
    state: directory
  when: force_genesis | bool

- name: Save previous data directory
  shell: |
    cd "/home/{{ ansible_user }}/code/metagraph-l0"
    mv data older-datas/data_{{ current_time }}
  ignore_errors: true
  when: force_genesis | bool

- name: Check if metagraph-l0.jar exists
  stat:
    path: "/home/{{ ansible_user }}/code/metagraph-l0/metagraph-l0.jar"
  register: metagraph_l0_jar

- name: Throw an error if the file metagraph-l0.jar doesn't exist
  fail:
    msg: "File /home/{{ ansible_user }}/code/metagraph-l0/metagraph-l0.jar does not exist"
  when: not metagraph_l0_jar.stat.exists
     
- name: Check if token file exists
  stat:
    path: "/home/{{ ansible_user }}/code/metagraph-l0/{{ lookup('env', 'CL_KEYSTORE') }}"
  register: token_file

- name: Throw an error if the token_file doesn't exist
  fail:
    msg: "File /home/{{ ansible_user }}/code/metagraph-l0/{{ lookup('env', 'CL_KEYSTORE') }} does not exist"
  when: not token_file.stat.exists

- name: Check if we already have incremental snapshots
  stat:
    path: "/home/{{ ansible_user }}/code/metagraph-l0/data/incremental_snapshot"
  register: folder_exists

- name: Start as rollback
  shell: |
    cd "/home/{{ ansible_user }}/code/metagraph-l0"
    nohup java -jar metagraph-l0.jar run-rollback --ip {{ ansible_host }} > metagraph-l0.log 2>&1 &
  when: folder_exists.stat.exists and not force_genesis | default(false)

- name: Start as genesis
  shell: |
    cd /home/{{ ansible_user }}/code/metagraph-l0
    nohup java -jar metagraph-l0.jar run-genesis genesis.snapshot --ip {{ ansible_host }} > metagraph-l0.log 2>&1 &
  when: not folder_exists.stat.exists or force_genesis | default(false)

- name: Check if node is Ready
  uri:
    url: "http://localhost:{{ metagraph_l0_public_port }}/node/info"
    method: GET
    return_content: yes
  register: response
  until: response.status == 200 and ("Ready" in response.content | string or retries >= 100)
  retries: 120
  delay: 1
  vars:
    retries: 0