# @cmd Build all the containers
# @flag   --no_cache                 Build docker containers with no cache
# @flag   --run                      Run containers after build
# @flag   --include_global_l1        Includes the global l1 layer to build/run
# @option --only                     Build specific layer. Options: global-l0, global-l1, currency-l0, currency-l1, monitoring
build() {
  BASEDIR=$(dirname "$0")
  VALID_ONLY_OPTIONS="global-l0 global-l1 currency-l0 currency-l1 monitoring"
  cd $BASEDIR

  echo "Please provide your GITHUB_TOKEN:"
  read github_token

  if [ -z "$github_token" ]; then
    echo "You should provide the GITHUB_PERSONAL_TOKEN"
    exit
  else
    global_l0_url=""
    global_l1_1_url=""
    global_l1_2_url=""
    global_l1_3_url=""
    currency_l0_url=""
    currency_l1_1_url=""
    currency_l1_2_url=""
    currency_l1_3_url=""
    grafana_url=""

    if [ ! -z "$argc_only" ]; then
      if [[ ! $VALID_ONLY_OPTIONS =~ (^|[[:space:]])$argc_only($|[[:space:]]) ]]; then
        echo "You should provide a valid only option"
        exit
      fi
    fi
    cd ../source
    export DOCKER_BUILDKIT=0

    echo "Creating docker custom-network..."
    if ! docker network inspect custom-network &>/dev/null; then
      docker network create --driver=bridge --subnet=172.50.0.0/24 custom-network
    fi
    echo "Network created"

    echo "Cloning tessellation repository to local codebase..."
    git clone https://github.com/Constellation-Labs/tessellation.git

    cd ../docker

    echo "Building ubuntu shared image..."
    cd ubuntu-with-java-and-sbt || exit
    docker-compose build
    docker-compose up -d
    cd ../
    echo "Ubuntu image built"

    if [[ -z "$argc_only" || "$argc_only" == "global-l0" ]]; then
      if [ -d "global-l0/tessellation" ]; then
        echo "Directory 'global-l0/tessellation 'already exists, skipping..."
      else
        echo "Copying tessellation to source/global-l0..."
        cp -r ../source/tessellation ../source/global-l0
        echo "Copied"
      fi

      cd global-l0 || exit
      if [ ! -z "$argc_no_cache" ]; then
        echo "Building Global L0 image... (NO CACHE)"
        docker-compose build --build-arg GIT_PERSONAL_ACCESS_TOKEN=$github_token --no-cache
      else
        echo "Building Global L0 image... (USING CACHE)"
        docker-compose build --build-arg GIT_PERSONAL_ACCESS_TOKEN=$github_token
      fi
      echo "Global L0 image built"

      if [ ! -z "$argc_run" ]; then
        echo "Starting Global L0 image ..."
        docker-compose up -d
        echo "Global L0 image started"

        for ((i = 1; i <= 11; i++)); do
          if ! curl http://localhost:9000/metrics &>/dev/null; then
            if [ $i -eq 10 ]; then
              echo "Could not find the Global L0 instance, make sure to run the Global L0 container"
              exit
            fi
            echo "Global L0 still booting... waiting 10s ($i/10)"
            sleep 10
          fi
        done
      fi
      global_l0_url="Global L0: http://localhost:9000/cluster/info"
      cd ../
    fi

    if [[ ! -z "$argc_include_global_l1" || "$argc_only" == "global-l1" ]]; then
      if [ -d "global-l1/tessellation" ]; then
        echo "Directory 'global-l1/tessellation 'already exists, skipping..."
      else
        echo "Copying tessellation to source/global-l1..."
        cp -r ../source/tessellation ../source/global-l1
        echo "Copied"
      fi

      cd global-l1 || exit
      if [ ! -z "$argc_no_cache" ]; then
        echo "Building Global L1 image... (NO CACHE)"
        docker-compose build --build-arg GIT_PERSONAL_ACCESS_TOKEN=$github_token --no-cache
      else
        echo "Building Global L1 image... (USING CACHE)"
        docker-compose build --build-arg GIT_PERSONAL_ACCESS_TOKEN=$github_token
      fi
      echo "Global L1 image built"

      if [ ! -z "$argc_run" ]; then
        echo "Starting Global L1 images ..."
        docker-compose up -d
        echo "Global L1 images started"

        echo "Joining Global l1 containers to build the cluster ..."
        for ((i = 1; i <= 11; i++)); do
          if curl -v http://localhost:9600/metrics &>/dev/null && curl -v http://localhost:9700/metrics &>/dev/null; then
            docker exec -it l1-global-2 curl -v -X POST http://localhost:9002/cluster/join -H "Content-type: application/json" -d '{ "id":"b1cf4d017eedb3e187b4d17cef9bdbcfdb2e57b26e346e9186da3a7a2b9110d73481fedbc6de23db51fb932371c54b02fff3388712dcb1e902870da7fa472f66", "ip": "172.50.0.7", "p2pPort": 9001 }' &>/dev/null
            docker exec -it l1-global-3 curl -v -X POST http://localhost:9002/cluster/join -H "Content-type: application/json" -d '{ "id":"b1cf4d017eedb3e187b4d17cef9bdbcfdb2e57b26e346e9186da3a7a2b9110d73481fedbc6de23db51fb932371c54b02fff3388712dcb1e902870da7fa472f66", "ip": "172.50.0.7", "p2pPort": 9001 }' &>/dev/null
            echo "Global L1 cluster built successfully"
            break
          else
            echo "Global L1 validators still booting... waiting 30s ($i/10)"
            sleep 30
          fi
        done
      fi
      global_l1_1_url="Global L1 - 1: http://localhost:9500/cluster/info"
      global_l1_2_url="Global L1 - 2: http://localhost:9600/cluster/info"
      global_l1_3_url="Global L1 - 3: http://localhost:9700/cluster/info"
      cd ../
    fi

    if [[ -z "$argc_only" || "$argc_only" == "currency-l0" ]]; then
      if [ -d "currency-l0/tessellation" ]; then
        echo "Directory 'currency-l0/tessellation 'already exists, skipping..."
      else
        echo "Copying tessellation to source/currency-l0..."
        cp -r ../source/tessellation ../source/currency-l0
        echo "Copied"
      fi

      cd currency-l0 || exit
      if [ ! -z "$argc_no_cache" ]; then
        echo "Building Currency L0 image... (NO CACHE)"
        docker-compose build --build-arg GIT_PERSONAL_ACCESS_TOKEN=$github_token --no-cache
      else
        echo "Building Currency L0 image... (USING CACHE)"
        docker-compose build --build-arg GIT_PERSONAL_ACCESS_TOKEN=$github_token
      fi
      echo "Currency L0 image built"

      if [ ! -z "$argc_run" ]; then
        echo "Starting Currency L0 image ..."
        docker-compose up -d
        echo "Currency L0 image started"

        for ((i = 1; i <= 11; i++)); do
          if ! curl http://localhost:9100/metrics &>/dev/null; then
            if [ $i -eq 10 ]; then
              echo "Could not find the Currency L0 instance, make sure to run the Currency L0 container"
              exit
            fi
            echo "Currency L0 still booting... waiting 10s ($i/10)"
            sleep 10
          fi
        done
      fi
      currency_l0_url="Currency L0: http://localhost:9100/cluster/info"
      cd ../
    fi

    if [[ -z "$argc_only" || "$argc_only" == "currency-l1" ]]; then
      if [ -d "currency-l1/tessellation" ]; then
        echo "Directory 'currency-l1/tessellation 'already exists, skipping..."
      else
        echo "Copying tessellation to source/currency-l1..."
        cp -r ../source/tessellation ../source/currency-l1
        echo "Copied"
      fi

      cd currency-l1 || exit
      if [ ! -z "$argc_no_cache" ]; then
        echo "Building Currency L1 image... (NO CACHE)"
        docker-compose build --build-arg GIT_PERSONAL_ACCESS_TOKEN=$github_token --no-cache
      else
        echo "Building Currency L1 image... (USING CACHE)"
        docker-compose build --build-arg GIT_PERSONAL_ACCESS_TOKEN=$github_token
      fi
      echo "Currency L1 image built"

      if [ ! -z "$argc_run" ]; then
        echo "Starting Currency L1 images ..."
        docker-compose up -d
        echo "Currency L1 images started"

        echo "Joining currency l1 containers to build the cluster ..."
        for ((i = 1; i <= 11; i++)); do
          if curl -v http://localhost:9300/metrics &>/dev/null && curl -v http://localhost:9400/metrics &>/dev/null; then
            docker exec -it l1-currency-2 curl -v -X POST http://localhost:9002/cluster/join -H "Content-type: application/json" -d '{ "id":"b1cf4d017eedb3e187b4d17cef9bdbcfdb2e57b26e346e9186da3a7a2b9110d73481fedbc6de23db51fb932371c54b02fff3388712dcb1e902870da7fa472f66", "ip": "172.50.0.4", "p2pPort": 9001 }' &>/dev/null
            docker exec -it l1-currency-3 curl -v -X POST http://localhost:9002/cluster/join -H "Content-type: application/json" -d '{ "id":"b1cf4d017eedb3e187b4d17cef9bdbcfdb2e57b26e346e9186da3a7a2b9110d73481fedbc6de23db51fb932371c54b02fff3388712dcb1e902870da7fa472f66", "ip": "172.50.0.4", "p2pPort": 9001 }' &>/dev/null
            echo "Currency L1 cluster built successfully"
            break
          else
            echo " Global L1 validators still booting... waiting 30s ($i/10)"
            sleep 30
          fi
        done
      fi
      currency_l1_1_url="Currency L1 - 1: http://localhost:9200/cluster/info"
      currency_l1_2_url="Currency L1 - 2: http://localhost:9300/cluster/info"
      currency_l1_3_url="Currency L1 - 3: http://localhost:9400/cluster/info"
      cd ../
    fi

    if [[ -z "$argc_only" || "$argc_only" == "monitoring" ]]; then
      cd monitoring || exit
      if [ ! -z "$argc_no_cache" ]; then
        echo "Building monitoring image... (NO CACHE)"
        docker-compose build --no-cache
      else
        echo "Building monitoring image... (USING CACHE)"
        docker-compose build
      fi
      echo "monitoring image built"

      if [ ! -z "$argc_run" ]; then
        echo "Starting monitoring image ..."
        docker-compose up -d
        echo "Monitoring image started"
      fi
      cd ../
      grafana_url="Grafana: http://localhost:3000/"
    fi

    if [ ! -z "$argc_run" ]; then
      echo "Containers successfully built. URLs:"
      echo "$global_l0_url"
      echo "$currency_l0_url"
      echo "$currency_l1_1_url"
      echo "$currency_l1_2_url"
      echo "$currency_l1_3_url"
      echo "$grafana_url"
      echo "$global_l1_1_url"
      echo "$global_l1_2_url"
      echo "$global_l1_3_url"
    fi

    echo "Cleaning up docker images"
    docker rmi $(docker images -f "dangling=true" -q) &>/dev/null

    chmod -R +w ../source
    chmod -R +w ../source/tessellation
    rm -r ../source/tessellation
  fi
}

# @cmd Start all the containers
# @flag   --include_global_l1        Includes the global l1 layer to build/run
# @option --only                     Build specific layer. Options: global-l0, global-l1, currency-l0, currency-l1, monitoring
start() {
  if [[ -z "$argc_only" || "$argc_only" == "global-l0" ]]; then
    if ! docker inspect --type=image global-l0 &>/dev/null; then
      echo "You need to build the Global L0 first"
      exit
    fi
  fi
  if [[ -z "$argc_only" || "$argc_only" == "currency-l0" ]]; then
    if ! docker inspect --type=image currency-l0 &>/dev/null; then
      echo "You need to build the Currency L0 first"
      exit
    fi
  fi
  if [[ -z "$argc_only" || "$argc_only" == "currency-l1" ]]; then
    if ! docker inspect --type=image currency-l1-initial-validator &>/dev/null; then
      echo "You need to build the Currency L1 first"
      exit
    fi
  fi

  if [[ ! -z "$argc_include_global_l1" || "$argc_only" == "global-l1" ]]; then
    if ! docker inspect --type=image global-l1-initial-validator &>/dev/null; then
      echo "You need to build the Global L1 first"
      exit
    fi
  fi

  VALID_ONLY_OPTIONS="global-l0 global-l1 currency-l0 currency-l1 monitoring"
  BASEDIR=$(dirname "$0")
  cd $BASEDIR

  global_l0_url=""
  global_l1_1_url=""
  global_l1_2_url=""
  global_l1_3_url=""
  currency_l0_url=""
  currency_l1_1_url=""
  currency_l1_2_url=""
  currency_l1_3_url=""
  grafana_url=""

  if [ ! -z "$argc_only" ]; then
    if [[ ! $VALID_ONLY_OPTIONS =~ (^|[[:space:]])$argc_only($|[[:space:]]) ]]; then
      echo "You should provide a valid only option"
      exit
    fi
  fi

  echo "Creating docker custom-network..."
  if ! docker network inspect custom-network &>/dev/null; then
    docker network create --driver=bridge --subnet=172.50.0.0/24 custom-network
  fi

  cd ../docker
  export DOCKER_BUILDKIT=0
  if [[ -z "$argc_only" || "$argc_only" == "global-l0" ]]; then
    cd global-l0 || exit

    echo "Starting Global L0 image ..."
    docker-compose up -d
    echo "Global L0 image started"

    for ((i = 1; i <= 11; i++)); do
      if ! curl http://localhost:9000/metrics &>/dev/null; then
        if [ $i -eq 10 ]; then
          echo "Could not find the Global L0 instance, make sure to run the Global L0 container"
          exit
        fi
        echo "Global L0 still booting... waiting 10s ($i/10)"
        sleep 10
      fi
    done

    global_l0_url="Global L0: http://localhost:9000/cluster/info"
    cd ../
  fi

  if [[ ! -z "$argc_include_global_l1" || "$argc_only" == "global-l1" ]]; then
    cd global-l1 || exit

    echo "Starting Global L1 images ..."
    docker-compose up -d
    echo "Global L1 images started"

    echo "Joining Global l1 containers to build the cluster ..."
    for ((i = 1; i <= 11; i++)); do
      if curl -v http://localhost:9600/metrics &>/dev/null && curl -v http://localhost:9700/metrics &>/dev/null; then
        docker exec -it l1-global-2 curl -v -X POST http://localhost:9002/cluster/join -H "Content-type: application/json" -d '{ "id":"b1cf4d017eedb3e187b4d17cef9bdbcfdb2e57b26e346e9186da3a7a2b9110d73481fedbc6de23db51fb932371c54b02fff3388712dcb1e902870da7fa472f66", "ip": "172.50.0.7", "p2pPort": 9001 }' &>/dev/null
        docker exec -it l1-global-3 curl -v -X POST http://localhost:9002/cluster/join -H "Content-type: application/json" -d '{ "id":"b1cf4d017eedb3e187b4d17cef9bdbcfdb2e57b26e346e9186da3a7a2b9110d73481fedbc6de23db51fb932371c54b02fff3388712dcb1e902870da7fa472f66", "ip": "172.50.0.7", "p2pPort": 9001 }' &>/dev/null
        echo "Global L1 cluster built successfully"
        break
      else
        echo "Global L1 validators still booting... waiting 30s ($i/10)"
        sleep 30
      fi
    done

    global_l1_1_url="Global L1 - 1: http://localhost:9500/cluster/info"
    global_l1_2_url="Global L1 - 2: http://localhost:9600/cluster/info"
    global_l1_3_url="Global L1 - 3: http://localhost:9700/cluster/info"
    cd ../
  fi

  if [[ -z "$argc_only" || "$argc_only" == "currency-l0" ]]; then
    cd currency-l0 || exit

    echo "Starting Currency L0 image ..."
    docker-compose up -d
    echo "Currency L0 image started"

    for ((i = 1; i <= 11; i++)); do
      if ! curl http://localhost:9100/metrics &>/dev/null; then
        if [ $i -eq 10 ]; then
          echo "Could not find the Currency L0 instance, make sure to run the Currency L0 container"
          exit
        fi
        echo "Currency L0 still booting... waiting 10s ($i/10)"
        sleep 10
      fi
    done
    currency_l0_url="Currency L0: http://localhost:9100/cluster/info"
    cd ../
  fi

  if [[ -z "$argc_only" || "$argc_only" == "currency-l1" ]]; then
    cd currency-l1 || exit
    echo "Starting Currency L1 images ..."
    docker-compose up -d
    echo "Currency L1 images started"

    echo "Joining currency l1 containers to build the cluster ..."
    for ((i = 1; i <= 11; i++)); do
      if curl -v http://localhost:9300/metrics &>/dev/null && curl -v http://localhost:9400/metrics &>/dev/null; then
        docker exec -it l1-currency-2 curl -v -X POST http://localhost:9002/cluster/join -H "Content-type: application/json" -d '{ "id":"b1cf4d017eedb3e187b4d17cef9bdbcfdb2e57b26e346e9186da3a7a2b9110d73481fedbc6de23db51fb932371c54b02fff3388712dcb1e902870da7fa472f66", "ip": "172.50.0.4", "p2pPort": 9001 }' &>/dev/null
        docker exec -it l1-currency-3 curl -v -X POST http://localhost:9002/cluster/join -H "Content-type: application/json" -d '{ "id":"b1cf4d017eedb3e187b4d17cef9bdbcfdb2e57b26e346e9186da3a7a2b9110d73481fedbc6de23db51fb932371c54b02fff3388712dcb1e902870da7fa472f66", "ip": "172.50.0.4", "p2pPort": 9001 }' &>/dev/null
        echo "Currency L1 cluster built successfully"
        break
      else
        echo " Global L1 validators still booting... waiting 30s ($i/10)"
        sleep 30
      fi
    done

    currency_l1_1_url="Currency L1 - 1: http://localhost:9200/cluster/info"
    currency_l1_2_url="Currency L1 - 2: http://localhost:9300/cluster/info"
    currency_l1_3_url="Currency L1 - 3: http://localhost:9400/cluster/info"
    cd ../
  fi

  if [[ -z "$argc_only" || "$argc_only" == "monitoring" ]]; then
    cd monitoring || exit

    echo "Starting monitoring image ..."
    docker-compose up -d
    echo "Monitoring image started"

    grafana_url="Grafana: http://localhost:3000/"
  fi

  echo "Containers successfully built. URLs:"
  echo "$global_l0_url"
  echo "$currency_l0_url"
  echo "$currency_l1_1_url"
  echo "$currency_l1_2_url"
  echo "$currency_l1_3_url"
  echo "$grafana_url"
  echo "$global_l1_1_url"
  echo "$global_l1_2_url"
  echo "$global_l1_3_url"
}

# @cmd Destroy all the containers
# @option --only                     Build specific layer. Options: global-l0, global-l1, currency-l0, currency-l1, monitoring
stop() {
  BASEDIR=$(dirname "$0")
  cd $BASEDIR || exit
  cd ..
  chmod -R +w source

  echo "Starting stopping containers ..."

  if [[ -z "$argc_only" || "$argc_only" == "currency-l1" ]]; then
    echo "Stopping Currency L1 container"
    cd docker/currency-l1 || exit
    docker-compose stop
    cd ../../
    echo "Currency L1 container stopped"
  fi

  if [[ -z "$argc_only" || "$argc_only" == "currency-l0" ]]; then
    echo "Stopping Currency L0 container"
    cd docker/currency-l0 || exit
    docker-compose stop
    cd ../../
    echo "Currency L0 container stopped"
  fi

  if [[ -z "$argc_only" || "$argc_only" == "global-l1" ]]; then
    echo "Stopping Global L1 container"
    cd docker/global-l1 || exit
    docker-compose stop
    cd ../../
    echo "Global L1 container stopped"
  fi

  if [[ -z "$argc_only" || "$argc_only" == "global-l0" ]]; then
    echo "Stopping Global L0 container"
    cd docker/global-l0 || exit
    docker-compose stop
    cd ../../
    echo "Global L0 container stopped"
  fi

  if [[ -z "$argc_only" || "$argc_only" == "monitoring" ]]; then
    echo "Stopping Global L0 container"
    cd docker/monitoring || exit
    docker-compose stop
    cd ../../
    echo "monitoring container stopped"
  fi
}

# @cmd Destroy all the containers
# @flag  --delete_local_codebase     Delete all local codebase
# @option --only                     Build specific layer. Options: global-l0, global-l1, currency-l0, currency-l1, monitoring
destroy() {
  BASEDIR=$(dirname "$0")
  cd $BASEDIR || exit
  cd ..
  chmod -R +w source

  echo "Starting destroying containers ..."

  if [[ -z "$argc_only" || "$argc_only" == "currency-l1" ]]; then
    if [ ! -z "$argc_delete_local_codebase" ]; then
      echo "Removing the Tessellation codebase at Currency L1..."
      rm -r source/currency-l1/tessellation
      echo "Removed!"
    fi
    echo "Destroying Currency L1 container"
    cd docker/currency-l1 || exit
    docker-compose down --remove-orphans
    cd ../../
    echo "Currency L1 container destroyed"
  fi

  if [[ -z "$argc_only" || "$argc_only" == "currency-l0" ]]; then
    if [ ! -z "$argc_delete_local_codebase" ]; then
      echo "Removing the Tessellation codebase at Currency L0..."
      rm -r source/currency-l0/tessellation
      echo "Removed!"
    fi
    echo "Destroying Currency L0 container"
    cd docker/currency-l0 || exit
    docker-compose down --remove-orphans
    cd ../../
    echo "Currency L0 container destroyed"
  fi

  if [[ -z "$argc_only" || "$argc_only" == "global-l1" ]]; then
    if [ ! -z "$argc_delete_local_codebase" ]; then
      echo "Removing the Tessellation codebase at Global L1..."
      rm -r source/global-l1/tessellation
      echo "Removed!"
    fi
    echo "Destroying Global L1 container"
    cd docker/global-l1 || exit
    docker-compose down --remove-orphans
    cd ../../
    echo "Global L1 container destroyed"
  fi

  if [[ -z "$argc_only" || "$argc_only" == "global-l0" ]]; then
    if [ ! -z "$argc_delete_local_codebase" ]; then
      echo "Removing the Tessellation codebase at Global L0..."
      rm -r source/global-l0/tessellation
      echo "Removed!"
    fi
    echo "Destroying Global L0 container"
    cd docker/global-l0 || exit
    docker-compose down --remove-orphans
    cd ../../
    echo "Global L0 container destroyed"
  fi

  if [[ -z "$argc_only" || "$argc_only" == "monitoring" ]]; then
    echo "Destroying Global L0 container"
    cd docker/monitoring || exit
    docker-compose down --remove-orphans
    cd ../../
    echo "monitoring container destroyed"
  fi

  echo "Destroying ubuntu-with-java-and-sbt container"
  cd docker/ubuntu-with-java-and-sbt || exit
  docker-compose down --remove-orphans
  cd ../../
  echo "ubuntu-with-java-and-sbt container destroyed"

  docker network rm custom-network
  docker rmi $(docker images -f "dangling=true" -q) &>/dev/null

  chmod -R +w source
  chmod -R +w source/tessellation
  rm -r source/tessellation
}

eval "$(argc "$0" "$@")"